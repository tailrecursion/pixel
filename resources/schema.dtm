;;; derived from https://gist.github.com/stuarthalloway/2948756

(use '[datomic.api :only (q db) :as d])
(def uri "datomic:mem://foo")
(d/create-database uri)
(def conn (d/connect uri))

(d/transact
 conn
 [

  ;; Pairs
  {:db/id #db/id[:db.part/db]
   :db/ident :pair
   :db/valueType :db.type/ref
   :db/isComponent true
   :db/cardinality :db.cardinality/many
   :db.install/_attribute :db.part/db}
  {:db/id #db/id[:db.part/db]
   :db/ident :pair/key
   :db/valueType :db.type/string
   :db/cardinality :db.cardinality/one
   :db.install/_attribute :db.part/db}
  {:db/id #db/id[:db.part/db]
   :db/ident :pair/val
   :db/valueType :db.type/string
   :db/cardinality :db.cardinality/one
   :db.install/_attribute :db.part/db}
 
  ;; Events
  {:db/id #db/id[:db.part/db]
   :db/ident :event/request-uri
   :db/valueType :db.type/uri
   :db/cardinality :db.cardinality/one
   :db.install/_attribute :db.part/db}
  {:db/id #db/id[:db.part/db]
   :db/ident :event/referer-uri
   :db/valueType :db.type/uri
   :db/cardinality :db.cardinality/one
   :db.install/_attribute :db.part/db}
  {:db/id #db/id[:db.part/db]
   :db/ident :event/time
   :db/valueType :db.type/instant
   :db/cardinality :db.cardinality/one
   :db.install/_attribute :db.part/db}
  {:db/id #db/id [:db.part/db]
   :db/ident :event/env
   :db/valueType :db.type/ref
   :db/cardinality :db.cardinality/many}
 
  ])

(import 'java.net.URI)
(import 'java.util.Date)
(use 'clojure.pprint)

(dotimes [n 5]
  (d/transact
  conn
  [{:db/id #db/id [:db.part/user]
    :event/request-uri (URI. (format "http://thefreshdiet.com/current%s.php" n))
    :event/referer-uri (URI. (format "http://thefreshdiet.com/prev%s.php" n))
    :event/time (Date.)}]))

(let [dbval (db conn)]
  (->> (q '[:find ?e :where [?e :event/time]] dbval)
       (map (fn [[id]] (d/entity dbval id)))
       (map (fn [ent] {:request (:event/request-uri ent)
                       :referer (:event/referer-uri ent)}))
       pprint
       ))